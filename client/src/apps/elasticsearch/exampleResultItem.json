{
    "result": {
        "_index": "oto_code",
        "_type": "file",
        "_id": "8kEXsmYBF-LiZlAMF4D0",
        "_score": 1,
        "_source": {
            "content": "#!/usr/bin/env python3\n\nimport argparse\nimport sys\nimport os\nimport glob\nimport subprocess\nimport shutil\nimport multiprocessing as mp\n\nSCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\nINTERPRETER_DIR = os.path.join(SCRIPT_DIR, '..', 'interpreter')\nWASM_EXEC = os.path.join(INTERPRETER_DIR, 'wasm')\n\nWAST_TESTS_DIR = os.path.join(SCRIPT_DIR, 'core')\nJS_TESTS_DIR = os.path.join(SCRIPT_DIR, 'js-api')\nHTML_TESTS_DIR = os.path.join(SCRIPT_DIR, 'html')\nHARNESS_DIR = os.path.join(SCRIPT_DIR, 'harness')\n\nHARNESS_FILES = ['testharness.js', 'testharnessreport.js', 'testharness.css']\nWPT_URL_PREFIX = '/resources'\n\n# Helpers.\ndef run(*cmd):\n    return subprocess.call(cmd,\n                           stdout=subprocess.PIPE,\n                           stderr=subprocess.STDOUT,\n                           universal_newlines=True)\n\n# Preconditions.\ndef ensure_remove_dir(path):\n    if os.path.exists(path):\n        shutil.rmtree(path)\n\ndef ensure_empty_dir(path):\n    ensure_remove_dir(path)\n    os.mkdir(path)\n\ndef compile_wasm_interpreter():\n    print(\"Recompiling the wasm interpreter...\")\n    result = run('make', '-C', INTERPRETER_DIR, 'clean', 'default')\n    if result != 0:\n        print(\"Couldn't recompile wasm spec interpreter\")\n        sys.exit(1)\n    print(\"Done!\")\n\ndef ensure_wasm_executable(path_to_wasm):\n    \"\"\"\n    Ensure we have built the wasm spec interpreter.\n    \"\"\"\n    result = run(path_to_wasm, '-v', '-e', '')\n    if result != 0:\n        print('Unable to run the wasm executable')\n        sys.exit(1)\n\n# JS harness.\ndef convert_one_wast_file(inputs):\n    wast_file, js_file = inputs\n    print('Compiling {} to JS...'.format(wast_file))\n    return run(WASM_EXEC, wast_file, '-h', '-o', js_file)\n\ndef convert_wast_to_js(out_js_dir):\n    \"\"\"Compile all the wast files to JS and store the results in the JS dir.\"\"\"\n\n    inputs = []\n\n    for wast_file in glob.glob(os.path.join(WAST_TESTS_DIR, '*.wast')):\n        # Don't try to compile tests that are supposed to fail.\n        if '.fail.' in wast_file:\n            continue\n\n        js_filename = os.path.basename(wast_file) + '.js'\n        js_file = os.path.join(out_js_dir, js_filename)\n        inputs.append((wast_file, js_file))\n\n    pool = mp.Pool(processes=8)\n    for result in pool.imap_unordered(convert_one_wast_file, inputs):\n        if result != 0:\n            print('Error when compiling {} to JS: {}', wast_file, result.stdout)\n\ndef build_js(out_js_dir, include_harness=False):\n    print('Building JS...')\n    convert_wast_to_js(out_js_dir)\n\n    print('Copying JS tests to the JS out dir...')\n    for js_file in glob.glob(os.path.join(JS_TESTS_DIR, '*.js')):\n        shutil.copy(js_file, out_js_dir)\n\n    harness_dir = os.path.join(out_js_dir, 'harness')\n    ensure_empty_dir(harness_dir)\n\n    print('Copying JS test harness to the JS out dir...')\n    for js_file in glob.glob(os.path.join(HARNESS_DIR, '*')):\n        if os.path.basename(js_file) in HARNESS_FILES and not include_harness:\n            continue\n        shutil.copy(js_file, harness_dir)\n\n    print('Done building JS.')\n\n# HTML harness.\nHTML_HEADER = \"\"\"<!doctype html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>WebAssembly Web Platform Test</title>\n    </head>\n    <body>\n\n        <script src={WPT_PREFIX}/testharness.js></script>\n        <script src={WPT_PREFIX}/testharnessreport.js></script>\n        <script src={PREFIX}/index.js></script>\n        <script src={PREFIX}/wasm-constants.js></script>\n        <script src={PREFIX}/wasm-module-builder.js></script>\n\n        <div id=log></div>\n\"\"\"\n\nHTML_BOTTOM = \"\"\"\n    </body>\n</html>\n\"\"\"\n\ndef build_html_js(out_dir, js_dir, include_harness=False):\n    if js_dir is None:\n        ensure_empty_dir(out_dir)\n        build_js(out_dir, include_harness)\n    else:\n        print('Copying JS files into the HTML dir...')\n        ensure_remove_dir(out_dir)\n        def ignore(_src, names):\n            if include_harness:\n                return []\n            return [name for name in names if os.path.basename(name) in HARNESS_FILES]\n        shutil.copytree(js_dir, out_dir, ignore=ignore)\n        print('Done copying JS files into the HTML dir.')\n\n    for js_file in glob.glob(os.path.join(HTML_TESTS_DIR, '*.js')):\n        shutil.copy(js_file, out_dir)\n\ndef build_html_from_js(js_html_dir, html_dir):\n    for js_file in glob.glob(os.path.join(js_html_dir, '*.js')):\n        js_filename = os.path.basename(js_file)\n        html_filename = js_filename + '.html'\n        html_file = os.path.join(html_dir, html_filename)\n        with open(html_file, 'w+') as f:\n            content = HTML_HEADER.replace('{PREFIX}', './js/harness') \\\n                                 .replace('{WPT_PREFIX}', WPT_URL_PREFIX)\n            content += \"        <script src=./js/{SCRIPT}></script>\".replace('{SCRIPT}', js_filename)\n            content += HTML_BOTTOM\n            f.write(content)\n\ndef build_html(html_dir, js_dir):\n    print(\"Building HTML tests...\")\n\n    js_html_dir = os.path.join(html_dir, 'js')\n\n    build_html_js(js_html_dir, js_dir)\n\n    print('Building WPT tests from JS tests...')\n    build_html_from_js(js_html_dir, html_dir)\n\n    print(\"Done building HTML tests.\")\n\n\n# Front page harness.\ndef wrap_single_test(js_file):\n    test_func_name = os.path.basename(js_file).replace('.', '_').replace('-', '_')\n\n    content = [\"(function {}() {{\".format(test_func_name)]\n    with open(js_file, 'r') as f:\n        content += f.readlines()\n    content.append('reinitializeRegistry();')\n    content.append('})();')\n\n    with open(js_file, 'w') as f:\n        f.write('\\n'.join(content))\n\ndef build_front_page(out_dir, js_dir):\n    print('Building front page containing all the HTML tests...')\n\n    js_out_dir = os.path.join(out_dir, 'js')\n\n    build_html_js(js_out_dir, js_dir, include_harness=True)\n    for js_file in glob.glob(os.path.join(js_out_dir, '*.js')):\n        wrap_single_test(js_file)\n\n    front_page = os.path.join(out_dir, 'index.html')\n    with open(front_page, 'w+') as f:\n        content = HTML_HEADER.replace('{PREFIX}', './js/harness') \\\n                             .replace('{WPT_PREFIX}', './js/harness')\n        for js_file in glob.glob(os.path.join(js_out_dir, '*.js')):\n            filename = os.path.basename(js_file)\n            content += \"        <script src=./js/{SCRIPT}></script>\\n\".replace('{SCRIPT}', filename)\n        content += HTML_BOTTOM\n        f.write(content)\n\n    print('Done building front page!')\n\n# Main program.\ndef process_args():\n    parser = argparse.ArgumentParser(description=\"Helper tool to build the\\\n            multi-stage cross-browser test suite for WebAssembly.\")\n\n    parser.add_argument('--js',\n                        dest=\"js_dir\",\n                        help=\"Relative path to the output directory for the pure JS tests.\",\n                        type=str)\n\n    parser.add_argument('--html',\n                        dest=\"html_dir\",\n                        help=\"Relative path to the output directory for the Web Platform tests.\",\n                        type=str)\n\n    parser.add_argument('--front',\n                        dest=\"front_dir\",\n                        help=\"Relative path to the output directory for the front page.\",\n                        type=str)\n\n    parser.add_argument('--dont-recompile',\n                        action=\"store_const\",\n                        dest=\"compile\",\n                        help=\"Don't recompile the wasm spec interpreter (by default, it is)\",\n                        const=False,\n                        default=True)\n\n    return parser.parse_args(), parser\n\nif __name__ == '__main__':\n    args, parser = process_args()\n\n    js_dir = args.js_dir\n    html_dir = args.html_dir\n    front_dir = args.front_dir\n\n    if front_dir is None and js_dir is None and html_dir is None:\n        print('At least one mode must be selected.\\n')\n        parser.print_help()\n        sys.exit(1)\n\n    if args.compile:\n        compile_wasm_interpreter()\n\n    ensure_wasm_executable(WASM_EXEC)\n\n    if js_dir is not None:\n        ensure_empty_dir(js_dir)\n        build_js(js_dir)\n\n    if html_dir is not None:\n        ensure_empty_dir(html_dir)\n        build_html(html_dir, js_dir)\n\n    if front_dir is not None:\n        ensure_empty_dir(front_dir)\n        build_front_page(front_dir, js_dir)\n\n    print('Done!')\n",
            "path": "/home/andie/ot/dolu/client/node_modules/webassembly-interpreter/spec/test/build.py",
            "name": "build.py"
        }
    },
    "bemBlocks": {},
    "index": 9,
    "children": null
}